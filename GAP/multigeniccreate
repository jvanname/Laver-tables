# Sample code: list is the collection of all Laver-like algebras with at most 5 critical points.
# x[3] is the array for an algebra in this list. x[3] is generated by x[1],x[2]. mv is the self-distributive binary operation.
# This code empirically verifies self-distributivity.
# list:=[[1,1,[[1]]]]; for k in [1..4] do list:=Concatenation(List(list,v->allextensions(true,v))); od;
# x:=list[200]; mv:=makefunction(x[3]); n:=Length(x[3]); 
# for kk in [1..100000] do a:=Random([1..n]); b:=Random([1..n]); c:=Random([1..n]); if not mv(a,mv(b,c))=mv(mv(a,b),mv(a,c)) then Display("E"); fi; od;

# makefunction returns a binary operation from an array. The binary operation is supposed to represent a Laver-like algebra.

makefunction:=function(compressedtable)
local n,tree;
n:=Length(compressedtable);
tree:=function(x,y)
if Length(compressedtable[x])=n then return compressedtable[x][y];
else
return compressedtable[x][compressedtable[Length(compressedtable[x])+1][y]];
fi;
end;
return tree;
end;

# critfind returns the list of all critical points in a Laver-like algebra. In particular, if $(X,*)$ is a Laver-like algebra, then
# critfind will return $\{c\in X\mid c*c\in\text{Li}(X)\}$.

critfind:=function(table)
local critlist,i,n,tree;
n:=Length(table);
critlist:=[];
tree:=makefunction(table);
for i in [2..n] do
if tree(i,i)=1 then Add(critlist,i); fi;
od;
Add(critlist,1);
return critlist;
end;

# The program is taking way too long to run. I therefore need to cut down the number of branches.

totalgeneration:=function(limit,zero,one,table)
local im,n,mv,critlist,superlist,i,j,superlength,supercrit,aa,ii,superfunction,doublesuperfunction,imagezero,imageone,testlistcrit,testlistlength,mzero,mone,tablezero,tableone,
mastertable,bb,qq,imagespace,card,cardzero,cardone,mm,tablespace,qqq,rrr,jj,kk,testfunction,test,aar,bbr,newtablespace,newimagespace,testlist,ttt,doubletestfunction,quart,is,js,ri,rj,ham,
parkzero,parkone,aaa,b;

n:=Length(table);

mv:=makefunction(table);
critlist:=critfind(table);

superlist:=[];
for im in [1..n] do
for j in [1..Length(critlist)] do
if mv(im,critlist[j])=1 then superlist[im]:=j; break; fi;
od;
od;

superlength:=[];
supercrit:=[];

for im in [2..n] do
aa:=critlist[1+superlist[im]];
if aa>1 then superlength[im]:=aa-1; supercrit[im]:=aa;
else superlength[im]:=n; supercrit[im]:=n+1;
fi;
od;

mastertable:=[];

mastertable[1]:=[];
mastertable[1][1]:=[];
mastertable[1][1][1]:=[1];
mastertable[1][1][2]:=[[1..n]];


superfunction:=function(x,y)
if x=1000000000000 or y=1000000000000 then return 1000000000000; fi;
if x=1 then return y; fi;
if y>n then return superfunction(x,imagespace[y-n]); fi;
if x<=n then return mv(x,y); fi;
if x=n+1 then return y; fi;
if x<=n+mm then
qq:=Length(tablespace[x-n])+1;
return tablespace[x-n][superfunction(qq,y)];
fi;
if x=n+mm+1 then 
if IsBound(testlist[superfunction(testlistcrit,y)]) then return testlist[superfunction(testlistcrit,y)];
else return 1000000000000; fi;
fi;
Print("WARNING:OFF.BY.ONE.ERROR");
end;


doublesuperfunction:=function(x,y)
if x=1000000000000 or y=1000000000000 then return 1000000000000; fi;
if x=1 then return y; fi;
if y>n then
if y<=n+mzero then return doublesuperfunction(x,imagezero[y-n]);
elif y<=n+mzero+mone-1 then return doublesuperfunction(x,imageone[y-n-mzero+1]); 
elif y=n+mzero+mone then return doublesuperfunction(x,ii);
else Print("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE__off.by.one.error");
fi;
fi;

if x<=n then return mv(x,y); fi;
if x=n+1 then return y; fi;
if x<=n+mzero then
qq:=Length(tablezero[x-n])+1;
return tablezero[x-n][doublesuperfunction(qq,y)];
fi;
if x<=n+mzero+mone-1 then
qq:=Length(tableone[x-n-mzero+1])+1;
ham:=tableone[x-n-mzero+1][doublesuperfunction(qq,y)];
if ham<=n+1 then return ham;
else return ham+mzero-1;
fi;

fi;
if x=n+mzero+mone then
if IsBound(testlist[doublesuperfunction(testlistcrit,y)]) then return testlist[doublesuperfunction(testlistcrit,y)]; else
return 1000000000000; fi;
fi;
end;

doubletestfunction:=function()

if IsBound(testlist[doublesuperfunction(testlistcrit,zero)]) then if not testlist[doublesuperfunction(testlistcrit,zero)]=n+mzero then return false; fi; fi;
testlist[doublesuperfunction(testlistcrit,zero)]:=n+mzero;

if mone>1 then

if IsBound(testlist[doublesuperfunction(testlistcrit,one)]) then if not testlist[doublesuperfunction(testlistcrit,one)]=n+mzero+mone-1 then return false; fi; fi;
testlist[doublesuperfunction(testlistcrit,one)]:=n+mzero+mone-1;

elif mone=1 then

if IsBound(testlist[doublesuperfunction(testlistcrit,one)]) then if not testlist[doublesuperfunction(testlistcrit,one)]=n+1 then return false; fi; fi;
testlist[doublesuperfunction(testlistcrit,one)]:=n+1;

else Print("EEEEEEEEEEEE"); fi;

for kk in Reversed([2..testlistlength]) do
aar:=doublesuperfunction(doublesuperfunction(n+mzero+mone,kk),doublesuperfunction(n+mzero+mone,zero));
if aar=false then return false; fi;
if IsBound(testlist[doublesuperfunction(kk,zero)]) and not testlist[doublesuperfunction(kk,zero)]=aar then return false; fi;
testlist[doublesuperfunction(kk,zero)]:=aar;

bbr:=doublesuperfunction(doublesuperfunction(n+mzero+mone,kk),doublesuperfunction(n+mzero+mone,one));
if bbr=false then return false; fi;
if IsBound(testlist[doublesuperfunction(kk,one)]) and not testlist[doublesuperfunction(kk,one)]=bbr then return false; fi;
testlist[doublesuperfunction(kk,one)]:=bbr;

od;

if not testlist[1]=1 then return false; fi;

if doublesuperfunction(n+mzero+mone,ii)=1 then return false; fi;

return true;
end;


testfunction:=function()

if ttt=0 then card:=mastertable[aa][jj]; else card:=mastertable[bb][jj-qqq]; fi;


if ttt=0 then
if IsBound(testlist[superfunction(testlistcrit,zero)]) then if not testlist[superfunction(testlistcrit,zero)]=n+mm then 
return false; fi; fi;
testlist[superfunction(testlistcrit,zero)]:=n+mm;

if IsBound(testlist[superfunction(testlistcrit,one)]) then if not testlist[superfunction(testlistcrit,one)]=mv(ii,one) then 
return false; fi; fi;
testlist[superfunction(testlistcrit,one)]:=mv(ii,one);
else

if IsBound(testlist[superfunction(testlistcrit,zero)]) then if not testlist[superfunction(testlistcrit,zero)]=mv(ii,zero) then 
return false; fi; fi;
testlist[superfunction(testlistcrit,zero)]:=mv(ii,zero);

if IsBound(testlist[superfunction(testlistcrit,one)]) then if not testlist[superfunction(testlistcrit,one)]=n+mm then 
return false; fi; fi;
testlist[superfunction(testlistcrit,one)]:=n+mm;
fi;

for kk in Reversed([2..testlistlength]) do
aar:=superfunction(superfunction(n+mm+1,kk),superfunction(n+mm+1,zero));
if aar=false then return false; fi;
if IsBound(testlist[superfunction(kk,zero)]) and not testlist[superfunction(kk,zero)]=aar then 
 return false; fi;
testlist[superfunction(kk,zero)]:=aar;

bbr:=superfunction(superfunction(n+mm+1,kk),superfunction(n+mm+1,one));
if bbr=false then return false; fi;
if IsBound(testlist[superfunction(kk,one)]) and not testlist[superfunction(kk,one)]=bbr then 
return false; fi;
testlist[superfunction(kk,one)]:=bbr;

od;

if not testlist[1]=1 then 
return false; fi;

if superfunction(n+mm+1,ii)=1 then return false; fi;

return true;
end;


for ii in [2..n] do

aa:=mv(ii,zero);
bb:=mv(ii,one);
mastertable[ii]:=[];

if mv(ii,ii)>1 and mv(aa,aa)=1 and mv(bb,bb)=1 then
imagespace:=[1,ii];
tablespace:=[[1..n],StructuralCopy(table[ii])];

Add(mastertable[ii],[imagespace,tablespace]);
fi;


qqq:=Length(mastertable[aa]);
rrr:=Length(mastertable[bb]);

for jj in [1..qqq+rrr] do
if jj<=qqq then ttt:=0; else ttt:=1; fi;

if ttt=0 and mv(bb,bb)>1 then continue; fi;
if ttt=1 and mv(aa,aa)>1 then continue; fi;

if ttt=0 then card:=mastertable[aa][jj]; else card:=mastertable[bb][jj-qqq]; fi;
imagespace:=card[1];
tablespace:=card[2];
mm:=Length(imagespace);

if mm+1>limit then continue; fi;

testlist:=[];
testlistlength:=superlength[ii];
testlistcrit:=supercrit[ii];

test:=testfunction();

if test then
newimagespace:=ShallowCopy(imagespace);
newtablespace:=ShallowCopy(tablespace);


if superfunction(n+mm+1,critlist[superlist[ii]])=1 then
while Length(testlist)>=critlist[superlist[ii]] do Remove(testlist); od;
fi;

Add(newimagespace,ii);
Add(newtablespace,testlist);

Add(mastertable[ii],[newimagespace,newtablespace]);

fi;

od;

for ri in [1..Length(mastertable[aa])] do
for rj in [1..Length(mastertable[bb])] do

cardzero:=mastertable[aa][ri];
cardone:=mastertable[bb][rj];

imagezero:=cardzero[1];
imageone:=cardone[1];

tablezero:=cardzero[2];
tableone:=cardone[2];

mzero:=Length(imagezero);
mone:=Length(imageone);

if mzero+mone>limit then continue; fi;

testlist:=[];
testlistlength:=superlength[ii];
testlistcrit:=supercrit[ii];

test:=doubletestfunction();
if test then
imagespace:=ShallowCopy(imagezero);
tablespace:=ShallowCopy(tablezero);
for is in [2..Length(imageone)] do
Add(imagespace,imageone[is]);
od;
for is in [2..Length(tableone)] do
quart:=ShallowCopy(tableone[is]);
for js in [1..Length(quart)] do
if quart[js]>n+1 then
quart[js]:=quart[js]+mzero-1;
fi;
od;

Add(tablespace,quart);
od;

if doublesuperfunction(n+mzero+mone,critlist[superlist[ii]])=1 then
while Length(testlist)>=critlist[superlist[ii]] do Remove(testlist); od;
fi;

Add(imagespace,ii);
Add(tablespace,testlist);

Add(mastertable[ii],[imagespace,tablespace]);
fi;

od;
od;


od;

parkzero:=[];
parkone:=[];

#Here we have an issue of the table not accepting generators. Sad.

#for card in mastertable[zero] do
#test:=false;
#tablespace:=card[2];
#for aaa in tablespace do
#if test then break; fi;
#for b in aaa do
#if b=n+1 then test:=true; break; fi;
#od;
#od;
#if test or Length(tablespace)=1 then Add(parkzero,card); fi;
#od;
#for card in mastertable[one] do
#test:=false;
#tablespace:=card[2];
#for aaa in tablespace do
#if test then break; fi;
#for b in aaa do
#if b=n+1 then test:=true; break; fi;
#od;
#od;
#if test or Length(tablespace)=1 then Add(parkone,card); fi;
#od;

return [mastertable[zero],mastertable[one]];

#return [parkzero,parkone];
end;


extendtable:=function(type,number,xx,extension)
local har,n,quack,i,j,mzero,hack,rack,zeroext,oneext;

n:=Length(xx[3]);

if type<2 then
if type=0 then
Append(xx[3],StructuralCopy(extension[1][number][2]));
xx[1]:=Length(xx[3]);
Append(xx[3][n+1],StructuralCopy(extension[1][number][1]));
for i in [1..n] do
if Length(xx[3][i])=n then Append(xx[3][i],StructuralCopy(List(extension[1][number][1],v->xx[3][i][v]))); fi;
od;
xx[3][1]:=[1..Length(xx[3][1])];
else
Append(xx[3],StructuralCopy(extension[2][number][2]));
xx[2]:=Length(xx[3]);
Append(xx[3][n+1],StructuralCopy(extension[2][number][1]));
fi;
for i in [1..n] do
if Length(xx[3][i])=n then Append(xx[3][i],StructuralCopy(List(extension[2][number][1],v->xx[3][i][v]))); fi;
od;
xx[3][1]:=[1..Length(xx[3][1])];
else

zeroext:=StructuralCopy(extension[1][number[1]]);
oneext:=StructuralCopy(extension[2][number[2]]);

Append(xx[3],zeroext[2]);
xx[1]:=Length(xx[3]);

Append(xx[3][n+1],zeroext[1]);

mzero:=Length(zeroext[2]);

har:=StructuralCopy(oneext[2]);

for i in [2..Length(har)] do
quack:=har[i];
for j in [1..Length(quack)] do
if quack[j]>n+1 then 
quack[j]:=quack[j]+mzero-1;
fi;
od;
Add(xx[3],quack);
od;


xx[2]:=Length(xx[3]);

if Length(oneext[2])=1 then
xx[2]:=n+1;
fi;


hack:=StructuralCopy(zeroext[1]);

rack:=StructuralCopy(oneext[1]);


for i in [2..Length(rack)] do
if rack[i]<=n+1 then Add(hack,rack[i]);
else
Add(hack,rack[i]+mzero-1);
fi;
od;

for i in [1..n] do
if Length(xx[3][i])=n then Append(xx[3][i],List(hack,v->xx[3][i][v])); fi;
od;
xx[3][1]:=[1..Length(xx[3][1])];
xx[3][n+1]:=Concatenation([1..n],hack);

fi;

end;



allextensions:=function(tar,x)
local ext,list,i,xx,newext,j,full,limit,n,marchlist,card,test,aaa,b,tablespace;

mv:=makefunction(x[3]);

n:=Length(x[3]);

if not IsInt(tar) then limit:=infinity; else limit:=tar; fi;
full:=not (tar=false);

ext:=totalgeneration(limit,x[1],x[2],x[3]);
list:=[];

marchlist:=[[],[]];

for card in ext[1] do
test:=false;
tablespace:=card[2];
for aaa in tablespace do
if test then break; fi;
for b in aaa do
if b=n+1 then test:=true; break; fi;
od;
od;
if test or Length(tablespace)=1 then Add(marchlist[1],1); 
else Add(marchlist[1],0); fi;
od;

for card in ext[2] do
test:=false;
tablespace:=card[2];
for aaa in tablespace do
if test then break; fi;
for b in aaa do
if b=n+1 then test:=true; break; fi;
od;
od;
if test or Length(tablespace)=1 then Add(marchlist[2],1); 
else Add(marchlist[2],0); fi;
od;



for i in [1..Length(ext[1])] do
if mv(x[2],x[2])>1 then break; fi;

if Length(ext[1][i][2])>limit then continue; fi;

if marchlist[1][i]=0 then continue; fi;

xx:=StructuralCopy(x);
extendtable(0,i,xx,ext);



Add(list,xx);
od;
for j in [1..Length(ext[2])] do
if mv(x[1],x[1])>1 then break; fi;

if Length(ext[2][j][2])>limit then continue; fi;

if marchlist[2][j]=0 then continue; fi;

xx:=StructuralCopy(x);
extendtable(1,j,xx,ext);
Add(list,xx);
od;

if full then
for i in [1..Length(ext[1])] do
for j in [1..Length(ext[2])] do
if Length(ext[1][i][2])+Length(ext[2][j][2])-1>limit then continue; fi;

if marchlist[1][i]=0 and marchlist[2][j]=0 then continue; fi;

xx:=StructuralCopy(x);
extendtable(2,[i,j],xx,ext);
Add(list,xx);
od;
od;
fi;
return list;
end;



### Given a superreduced multigenic Laver table x with 2 generators and n critical points, allextensions will return a random superreduced multigenic Laver table
### xx with n+1 critical points and 2 generators and where x is a homomorphic image of xx by a homomorphism mapping the generators of xx to the generators of x and where
### x is a subalgebra of xx.


#randomextension:=function(tar,x)
#local pp,qq,limit,full,ext,tarball,i,j;

#if not IsInt(tar) then limit:=infinity; else limit:=tar; fi;
#full:=not (tar=false);
#ext:=totalgeneration(limit,x[1],x[2],x[3]);
#if Length(ext[1])+Length(ext[2])=0 then return 0; fi;
#tarball:=[];
#for i in [1..Length(ext[1])] do
#for j in [1..Length(ext[2])] do
#if Length(ext[1][i][2])+Length(ext[2][j][2])-1<=limit then Add(tarball,[i,j]); fi;
#od;
#od;
#pp:=Random([1..Length(ext[1])+Length(ext[2])+Length(tarball)]);
#if pp<=Length(ext[1]) then
#qq:=pp;
#extendtable(0,qq,x,ext);
#elif pp<=Length(ext[1])+Length(ext[2]) then
#qq:=pp-Length(ext[1]);
#extendtable(1,qq,x,ext);
#else
#qq:=pp-Length(ext[1])-Length(ext[2]);
#extendtable(2,tarball[qq],x,ext);
#fi;

#return Length(ext[1])+Length(ext[2])+Length(tarball);
#end;


######simpleknuthestimate returns an unbiased estimate for the number of superreduced multigenic Laver tables of cardinality at most n. This estimate is an instance of Donald Knuth's
######algorithm for estimating the number of nodes in a tree or estimating the amount of time a backtracking algorithm will take.

#simpleknuthestimate:=function(n)
#local x,list,pp,count,pivot,a;

#x:=[1,1,[[1]]]; list:=[];
#while true do
#pp:=randomextension(n-Length(x[3]),x);
#if pp>0 then Add(list,pp); else break; fi;
#od;
#count:=1; pivot:=1; for a in list do pivot:=pivot*a; count:=count+pivot; od; return count; end;


nightmaretest:=function(x)
local critlist,i,k,mv;
critlist:=critfind(x);
mv:=makefunction(x);
for i in [1..Length(x)] do
for k in critlist do
if mv(mv(i,i),k)=1 and not mv(i,k)=1 then return false; fi;
od;
od;
return true;
end;

# inconsistencysearch,inconsistencysearchtwo search for inconsistencies in the large cardinal heirarchy.

consistencytest:=function(xx,rr,mm)
local zero,one,table,critlist,mv,list,nn,kk,cc;

zero:=xx[1];
one:=xx[2];
table:=xx[3];
critlist:=critfind(table);
mv:=makefunction(table);
if mv(one,one)>1 or not nightmaretest(table) then return false; fi;


list:=[zero];

while list[Length(list)]>1 do Add(list,mv(list[Length(list)],zero)); od;

nn:=Log(Length(list),2);

if nn<=mm+1 then return true; fi;

if not mv(one,list[2^nn-2^mm])=1 then return false; fi;

for kk in list do
for cc in critlist do
if mv(kk,one)=1 then continue; fi;
if mv(kk,list[2^nn-2^mm])=1 then continue; fi;
if not (mv(mv(kk,one),cc)=1)=(mv(mv(kk,list[2^nn-2^mm]),mv(mv(kk,list[rr]),cc))=1) then return false; fi;
od;
od;
return true;
end;

# rr,mm should be positive integers with rr<=2^mm.

inconsistencysearch:=function(rr,mm)
local list,pan,yy,amm,bmm;

list:=[[1,1,[[1]]]];

while Length(list)>0 do
SortBy(list,v->-Length(v[3]));
pan:=allextensions(true,Remove(list));
for yy in pan do 
if consistencytest(yy,rr,mm) then Add(list,yy); fi; od;
Display(List(list,v->Length(v[3])));
od;
while true do
Display("WARNING: LARGE CARDINAL INCONSISTENCY FOUND OR ERROR IN CODE! Please submit an issue or report this possible inconsistency to the Circcash development team at circcash9192020 AT protonmail.com.");
od;
end;

critequaltest:=function(a,b,table)
local n,mv,ttt,i,aa,bb,pna,taa,tbb,list,pan;
n:=Length(table);
mv:=makefunction(table);

ttt:=[];
for i in [1..n] do ttt[i]:=[]; od;

list:=[];

for i in [1..n] do 
aa:=mv(i,a);
bb:=mv(i,b);
if not (aa=1)=(bb=1) then return false; fi;
if not IsBound(ttt[aa][bb]) then 
ttt[aa][bb]:=true; 
if aa>1 then Add(list,[aa,bb]); fi;
fi;
od;

while Length(list)>0 do
pan:=Remove(list);
taa:=pan[1];
tbb:=pan[2];
if not Length(table[taa])=Length(table[tbb]) then return false; fi;

for i in [1..Length(table[taa])] do
aa:=table[taa][i];
bb:=table[tbb][i];
if not (aa=1)=(bb=1) then return false; fi;
if not IsBound(ttt[aa][bb]) then 
ttt[aa][bb]:=true; 
if aa>1 then Add(list,[aa,bb]); fi;
fi;
od;
od;

return true;
end;


consistencytesttwo:=function(xx,mm,nn)
local mv,aa,bb,i;

mv:=makefunction(xx[3]);
aa:=1;
bb:=1;
for i in [1..mm] do
aa:=mv(aa,xx[1]);
od;
for i in [1..nn] do
bb:=mv(bb,xx[2]);
od;

return critequaltest(aa,bb,xx[3]) and nightmaretest(xx[3]);

end;

# Here rr,mm should be positive integers.

inconsistencysearchtwo:=function(rr,mm)
local list,pan,yy,amm,bmm;

list:=[[1,1,[[1]]]];

while Length(list)>0 do
SortBy(list,v->-Length(v[3]));
pan:=allextensions(true,Remove(list));
for yy in pan do 
amm:=consistencytesttwo(yy,rr,mm);
if amm then Add(list,yy); fi; od;
Display(List(list,v->Length(v[3])));
od;
Display("WARNING: LARGE CARDINAL INCONSISTENCY FOUND OR ERROR IN CODE! Please submit an issue or report this possible inconsistency to the Circcash development team at circcash9192020 AT protonmail.com.");
end;




