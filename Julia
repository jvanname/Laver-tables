#Translated from GAP to Julia
#The code is all messed up. I need to fix it. It is not producing all the tables even though it is translated from working code.

function makefunction(compressedtable)
    n = length(compressedtable)
    function tree(x, y)
        if length(compressedtable[x]) == n
            return compressedtable[x][y]
        else
            return compressedtable[x][compressedtable[length(compressedtable[x]) + 1][y]]
        end
    end
    return tree
end

function critfind(table)
    n = length(table)
    critlist = []
    tree = makefunction(table)
    for i in 2:n
        if tree(i, i) == 1
            push!(critlist, i)
        end
    end
    push!(critlist, 1)
    return critlist
end

### It looks like there is another error where we are zeroing out good information.
multigeneration(generators, table) = begin
    local mlist,aa,pointarray,testlistcrit,testlist,zeroafter,testlistlength,sumlist,imagearray,ii;
    n = length(table)
    mv = makefunction(table)
    critlist = critfind(table)
    gg = length(generators)
    # I need to produce mlist and aa before I can use these quantities.
    superlist = []
    for imt in 1:n
        for j in 1:length(critlist)
            if mv(imt, critlist[j]) == 1
                push!(superlist,j);
                break
            end
        end
    end
    # I need to remember that superlength and supercrit are defined this way.
    superlength = [0]
    supercrit = [0]
    testlistarray=[[]];

    for imt in 2:n
        aa = critlist[1 + superlist[imt]]
        if aa > 1
            push!(superlength,aa - 1);
            push!(supercrit,aa);
        else
            push!(superlength, n);
            push!(supercrit, n + 1);
        end
       push!(testlistarray,zeros(Int64,superlength[imt]));
end
    
    superfunction(x, y) = begin
        if x == 1000000000000 || y == 1000000000000
            return 1000000000000
        end
        if x == 1
            return y
        end
        
        if y > n
            for ik in 1:gg
                if y <= sumlist[ik + 1]
                    return superfunction(x, imagearray[ik][y - sumlist[ik] + 1])
                end
            end
            if y == sumlist[length(sumlist)] + 1
                return superfunction(x, ii)
            end
            println("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE__off.by.one.error")
        end
        
        if x <= n
            return mv(x, y)
        end
        if x == n + 1
            return y
        end
        for ik in 1:gg
            if x <= sumlist[ik + 1]
                qq = length(tablearray[ik][x - sumlist[ik] + 1]) + 1
                ham = tablearray[ik][x - sumlist[ik] + 1][superfunction(qq, y)]
                if ham <= n + 1
                    return ham
                else
                    return ham + sumlist[ik] - n - 1
                end
            end
        end
        if x == sumlist[length(sumlist)] + 1
            if testlist[superfunction(testlistcrit, y)]>0
                return testlist[superfunction(testlistcrit, y)]
            else
                return 1000000000000
            end
        end
        println("WARNING:ERROR. PLEASE FIX CODE.")
    end
    
    sanitycheck() = begin
        nnq = sumlist[length(sumlist)]
        for a in 1:nnq
            for b in 1:nnq
                for c in 1:nnq
                    if !(superfunction(a, superfunction(b, c)) == superfunction(superfunction(a, b), superfunction(a, c)))
                        while true
                            display("Warning: self-distributive failure. Error in code.")
                        end
                    end
                end
            end
        end
    end
    
    testfunction() = begin
        for li in 1:gg
            if mlist[li] > 1
                if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == sumlist[li + 1])
                    return false
                end
                push!(zeroafter,superfunction(testlistcrit, generators[li]));
                testlist[superfunction(testlistcrit, generators[li])] = sumlist[li + 1];
            elseif mlist[li] == 1
                if aa[li] == 1
                    if pointarray[li] == 0
                        if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == n + 1)
                            return false
                        end
                        push!(zeroafter,superfunction(testlistcrit, generators[li]));
                        testlist[superfunction(testlistcrit, generators[li])] = n + 1
                    elseif pointarray[li] == 1
                        if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == 1)
                            return false
                        end
                        push!(zeroafter,superfunction(testlistcrit, generators[li]));
                        testlist[superfunction(testlistcrit, generators[li])] = 1
                    end
                elseif aa[li] > 1
                    if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == mv(ii, generators[li]))
                        return false
                    end
                    push!(zeroafter,superfunction(testlistcrit, generators[li]));
                    testlist[superfunction(testlistcrit, generators[li])] = mv(ii, generators[li])
                end
            end
        end
        
        for kk in reverse(2:testlistlength)
            for li in 1:gg
                aar = superfunction(superfunction(sumlist[length(sumlist)] + 1, kk), superfunction(sumlist[length(sumlist)] + 1, generators[li]))
                if aar == false
                    return false
                end
                if testlist[superfunction(kk, generators[li])]>0 && !(testlist[superfunction(kk, generators[li])] == aar)
                    return false
                end
                push!(zeroafter,superfunction(kk, generators[li]));
                testlist[superfunction(kk, generators[li])] = aar
            end
        end
        
        if !(testlist[1] == 1)
            return false
        end
        
        if superfunction(sumlist[length(sumlist)] + 1, ii) == 1
            return false
        end
        
        return true
    end
    
    mastertable =[ [ [ [ 1 ], Any[ 1 : n ], 0 ], [ [ 1 ], Any[ 1 : n ], 1 ] ] ]
        
    for ii in 2:n
#        display(["ii=",ii]);
        push!(mastertable,[]);
        if mv(ii, ii) == 1
            push!(mastertable[ii],[[1], Any[1:n], 1]);
        end
        
        aa = []
        for jj in 1:gg
            push!(aa,mv(ii, generators[jj]));
        end
        cart =  collect(Iterators.product([1:aa[v] for v in 1:gg]...))

            display("M0");

        for tup in cart
            display("bc")
            cardarray = [mastertable[aa[v]][tup[v]] for v in 1:gg]
            display("ci")
            imagearray = [v[1] for v in cardarray]
            display("it")
            tablearray = [v[2] for v in cardarray]
            display("tp")
            pointarray = [v[3] for v in cardarray]
            display("M1");
            mlist = [length(imagearray[v]) for v in 1:gg]
            
            sumlist = [n + 1]
            
            for iz in 1:gg
                push!(sumlist,sumlist[iz] + mlist[iz] - 1);
            end
            zeroafter=[];
            testlist = testlistarray[ii]
            display(sum(testlist));
            testlistlength = superlength[ii]
            testlistcrit = supercrit[ii]
            
            test = testfunction()
            
            if test
                imagespace = copy(imagearray[1])
                for kz in 2:gg
                    for is in 2:length(imagearray[kz])
                        push!(imagespace, imagearray[kz][is])
                    end
                end
                
                tablespace = copy(tablearray[1])
                
                for kz in 2:gg
                    for is in 2:length(tablearray[kz])
                        quart = copy(tablearray[kz][is])
                        for js in 1:length(quart)
                            if quart[js] > n + 1
                                quart[js] = quart[js] + sumlist[kz] - n - 1
                            end
                        end
                        push!(tablespace, quart)
                    end
                end
                
                if superfunction(sumlist[length(sumlist)] + 1, critlist[superlist[ii]]) == 1
                    while length(testlist) >= critlist[superlist[ii]]
                        pop!(testlist)
                    end
                end
                
                push!(imagespace, ii)
                #  MethodError: Cannot `convert` an object of type Vector{Any} to an object of type UnitRange{Int64}
                push!(tablespace, deepcopy(testlist))
                push!(mastertable[ii], [imagespace, tablespace, 0])
                testlistarray[ii]=zeros(Int64,superlength[ii]);
                # we need to restore testlist reservoir.
            else
            for aa in zeroafter testlist[aa]=0; end;
            display("We are displaying the sum of the testlist. It should be zero on the next line. This message is annoying so that we know to delete it once the code is running.");
            display(sum(testlist[aa]));
            # we need to zero out the mess we have made.
            end
        end
    end
    
    return [mastertable[v] for v in generators]
end

function multiextendtable(type, generators, table, extension)
    n = length(table)
    mix = []
    newtable = deepcopy(table)
    finalcritlist = critfind(table)
    gg = length(generators)
    push!(finalcritlist, n+1)
    mv = makefunction(table)
    newgenerators = []

    cardarray = [extension[v][type[v]] for v in 1:gg]
    imagearray = [cardarray[v][1] for v in 1:gg]
    tablearray = [cardarray[v][2] for v in 1:gg]
    pointarray = [cardarray[v][3] for v in 1:gg]
    mlist = [length(imagearray[v]) for v in 1:gg]
    sumlist = [n+1]
    for iz in 1:gg
        push!(sumlist,sumlist[iz] + mlist[iz] - 1);
    end

    imagespace = copy(imagearray[1])
    for kz in 2:gg
        for is in 2:length(imagearray[kz])
            push!(imagespace, imagearray[kz][is])
        end
    end

    tablespace = copy(tablearray[1])
    for kz in 2:gg
        for is in 2:length(tablearray[kz])
            quart = copy(tablearray[kz][is])
            for js in 1:length(quart)
                if quart[js] > n+1
                    quart[js] = quart[js] + sumlist[kz] - n - 1
                end
            end
            push!(tablespace, quart)
        end
    end
    append!(newtable, tablespace)

    for a in finalcritlist
        if a > 1
            for b in imagespace
                push!(newtable[a], newtable[a][b])
            end
        end
    end
    append!(newtable[1], n+1:n+length(imagespace))

    for i in 1:gg
        if mlist[i] > 1
            push!(newgenerators,sumlist[i+1]);
        else
            if generators[i] > 1
                push!(newgenerators,generators[i]);
            else
                if pointarray[i] == 0
                    push!(newgenerators,n+1);
                elseif pointarray[i] == 1
                    push!(newgenerators,1);
                end
            end
        end
    end

    return [newgenerators, newtable]
end

function findimproper(generators, table, ext)
    n = length(table)
    improper = []

    for i in 1:length(ext)
        for j in 1:length(ext[i])
            imagecheck = ext[i][j][1]
            tablecheck = ext[i][j][2]
            pointcheck = ext[i][j][3]
            cont = false

            for iz in 2:length(tablecheck)
                if n+1 in tablecheck[iz]
                    cont = true
                end
            end

            if generators[i] == 1 && pointcheck == 0
                cont = true
            end

            if cont continue; end;

                push!(improper, j)
                break
            end
        end
    return Tuple(improper);
end

function allmultiextensions(generators, table)
    ext = multigeneration(generators, table)
    cart = collect(Iterators.product([1:length(v) for v in ext]...))
    improper = findimproper(generators, table, ext)
    output = []

    for tup in cart
        if tup == improper
            continue
        end
        push!(output, multiextendtable(tup, generators, table, ext))
    end

    return output
end

