# I probably have a few deepcopys when I just need copy, but that is fine for now.

function makefunction(compressedtable)
    n = length(compressedtable)
    function tree(x, y)
        if length(compressedtable[x]) == n
            return compressedtable[x][y]
        else
            return compressedtable[x][compressedtable[length(compressedtable[x]) + 1][y]]
        end
    end
    return tree
end

function critfind(table)
    n = length(table)
    critlist = []
    tree = makefunction(table)
    for i in 2:n
        if tree(i, i) == 1
            push!(critlist, i)
        end
    end
    push!(critlist, 1)
    return critlist
end

### It looks like there is another error where we are zeroing out good information.
multigeneration(generators, table) = begin
    local mlist,aa,pointarray,testlistcrit,testlist,zeroafter,testlistlength,sumlist,imagearray,ii,tablearray;
    n = length(table)
    mv = makefunction(table)
    critlist = critfind(table)
    gg = length(generators)
    # I need to produce mlist and aa before I can use these quantities.
    superlist = []
    for imt in 1:n
        for j in 1:length(critlist)
            if mv(imt, critlist[j]) == 1
                push!(superlist,j);
                break
            end
        end
    end
    # I need to remember that superlength and supercrit are defined this way.
    superlength = [0]
    supercrit = [0]
    testlistarray=[[]];

    for imt in 2:n
        aa = critlist[1 + superlist[imt]]
        if aa > 1
            push!(superlength,aa - 1);
            push!(supercrit,aa);
        else
            push!(superlength, n);
            push!(supercrit, n + 1);
        end
       push!(testlistarray,zeros(Int64,superlength[imt]));
end
    
    superfunction(x, y) = begin
        if x == 1000000000000 || y == 1000000000000
            return 1000000000000
        end
        if x == 1
            return y
        end
        
        if y > n
            for ik in 1:gg
                if y <= sumlist[ik + 1]
                    return superfunction(x, imagearray[ik][y - sumlist[ik] + 1])
                end
            end
            if y == sumlist[length(sumlist)] + 1
                return superfunction(x, ii)
            end
            println("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE__off.by.one.error")
        end
        
        if x <= n
            return mv(x, y)
        end
        if x == n + 1
            return y
        end
        for ik in 1:gg
            if x <= sumlist[ik + 1]
                qq = length(tablearray[ik][x - sumlist[ik] + 1]) + 1
                ham = tablearray[ik][x - sumlist[ik] + 1][superfunction(qq, y)]
                if ham <= n + 1
                    return ham
                else
                    return ham + sumlist[ik] - n - 1
                end
            end
        end
        if x == sumlist[length(sumlist)] + 1
            if testlist[superfunction(testlistcrit, y)]>0
                return testlist[superfunction(testlistcrit, y)]
            else
                return 1000000000000
            end
        end
        println("WARNING:ERROR. PLEASE FIX CODE.")
    end
    
#    sanitycheck() = begin
#        nnq = sumlist[length(sumlist)]
#        for a in 1:nnq
#            for b in 1:nnq
#                for c in 1:nnq
#                    if !(superfunction(a, superfunction(b, c)) == superfunction(superfunction(a, b), superfunction(a, c)))
#                        while true
#                            display("Warning: self-distributive failure. Error in code.")
#                        end
#                    end
#                end
#            end
#        end
#    end
    
   function testfunction()
        for li in 1:gg
            if mlist[li] > 1
                if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == sumlist[li + 1])
                    return false
                end
                push!(zeroafter,superfunction(testlistcrit, generators[li]));
                testlist[superfunction(testlistcrit, generators[li])] = sumlist[li + 1];
            elseif mlist[li] == 1
                if aa[li] == 1
                    if pointarray[li] == 0
                        if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == n + 1)
                            return false
                        end
                        push!(zeroafter,superfunction(testlistcrit, generators[li]));
                        testlist[superfunction(testlistcrit, generators[li])] = n + 1
                    elseif pointarray[li] == 1
                        if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == 1)
                            return false
                        end
                        push!(zeroafter,superfunction(testlistcrit, generators[li]));
                        testlist[superfunction(testlistcrit, generators[li])] = 1
                    end
                elseif aa[li] > 1
                    if testlist[superfunction(testlistcrit, generators[li])]>0 && !(testlist[superfunction(testlistcrit, generators[li])] == mv(ii, generators[li]))
                        return false
                    end
                    push!(zeroafter,superfunction(testlistcrit, generators[li]));
                    testlist[superfunction(testlistcrit, generators[li])] = mv(ii, generators[li])
                end
            end
        end
        
        for kk in reverse(2:testlistlength)
            for li in 1:gg
                aar = superfunction(superfunction(sumlist[length(sumlist)] + 1, kk), superfunction(sumlist[length(sumlist)] + 1, generators[li]))
                if aar == false
                    return false
                end
                if testlist[superfunction(kk, generators[li])]>0 && !(testlist[superfunction(kk, generators[li])] == aar)
                    return false
                end
                push!(zeroafter,superfunction(kk, generators[li]));
                testlist[superfunction(kk, generators[li])] = aar
            end
        end
        
        if !(testlist[1] == 1)
            return false
        end
        
        if superfunction(sumlist[length(sumlist)] + 1, ii) == 1
            return false
        end
        
        return true
    end
    # I need to edit the following line. I cannot push anything onto Any[1:n]. I need something pushable. 
    mastertable =[ [ [ [ 1 ], Any[collect(1 : n)], 0 ], [ [ 1 ], Any[collect(1 : n)], 1 ] ] ]
        
    for iii in 2:n
# This is the wrong way to solve the problem, but I am too tired trying to figure out the correct way to do this so that ii can be accessed within testfunction()
        ii=iii;
        push!(mastertable,[]);
        if mv(ii, ii) == 1
            push!(mastertable[ii],[[1], Any[collect(1:n)], 1]);
        end
        
        aa = []
        for jj in 1:gg
            push!(aa,mv(ii, generators[jj]));
        end
        # SHOULD BE. I THINK THERE IS AN ERROR HERE. cart:=Cartesian(List(aa,v->[1..Length(mastertable[v])]));
        cart =  collect(Iterators.product([1:length(mastertable[aa[v]]) for v in 1:gg]...))
        for tup in cart
            cardarray = [mastertable[aa[v]][tup[v]] for v in 1:gg]
            imagearray = [v[1] for v in cardarray]
            tablearray = [v[2] for v in cardarray]
            pointarray = [v[3] for v in cardarray]
            mlist = [length(imagearray[v]) for v in 1:gg]
            
            sumlist = [n + 1]
            
            for iz in 1:gg
                push!(sumlist,sumlist[iz] + mlist[iz] - 1);
            end
            zeroafter=[];
            testlist = testlistarray[ii]
            testlistlength = superlength[ii]
            testlistcrit = supercrit[ii]
            test = testfunction()
            if test
                imagespace = copy(imagearray[1])
                for kz in 2:gg
                    for is in 2:length(imagearray[kz])
                        push!(imagespace, imagearray[kz][is])
                    end
                end
                
                tablespace = copy(tablearray[1])
                
                for kz in 2:gg
                    for is in 2:length(tablearray[kz])
                        quart = copy(tablearray[kz][is])
                        for js in 1:length(quart)
                            if quart[js] > n + 1
                                quart[js] = quart[js] + sumlist[kz] - n - 1
                            end
                        end
                        push!(tablespace, quart)
                    end
                end
                
                if superfunction(sumlist[length(sumlist)] + 1, critlist[superlist[ii]]) == 1
                    while length(testlist) >= critlist[superlist[ii]]
                        pop!(testlist)
                    end
                end
                
                push!(imagespace, ii)
                push!(tablespace, deepcopy(testlist))
                push!(mastertable[ii], [imagespace, tablespace, 0])
                testlistarray[ii]=zeros(Int64,superlength[ii]);
                # we need to restore testlist reservoir.
            else
            for aa in zeroafter testlist[aa]=0; end;
if sum(testlist)>0 while true display("E"); end; end;
            # we need to zero out the mess we have made.
            end
        end
    end
    
    return [mastertable[v] for v in generators]
end

function multiextendtable(type, generators, table, extension)
    n = length(table)
    mix = []
    newtable = deepcopy(table)
    finalcritlist = critfind(table)
    gg = length(generators)
    push!(finalcritlist, n+1)
    mv = makefunction(table)
    newgenerators = []

    cardarray = [extension[v][type[v]] for v in 1:gg]
    imagearray = [cardarray[v][1] for v in 1:gg]
    tablearray = [cardarray[v][2] for v in 1:gg]
    pointarray = [cardarray[v][3] for v in 1:gg]
    mlist = [length(imagearray[v]) for v in 1:gg]
    sumlist = [n+1]
    for iz in 1:gg
        push!(sumlist,sumlist[iz] + mlist[iz] - 1);
    end

    imagespace = deepcopy(imagearray[1])
    for kz in 2:gg
        for is in 2:length(imagearray[kz])
            push!(imagespace, imagearray[kz][is])
        end
    end

    tablespace = deepcopy(tablearray[1])
    for kz in 2:gg
        for is in 2:length(tablearray[kz])
            quart = deepcopy(tablearray[kz][is])
            for js in 1:length(quart)
                if quart[js] > n+1
                    quart[js] = quart[js] + sumlist[kz] - n - 1
                end
            end
            push!(tablespace, quart)
        end
    end
    append!(newtable, tablespace)
# THERE IS AN ERROR HERE. I CANNOT PUSH.
    for a in finalcritlist
        if a > 1
            for b in imagespace
                push!(newtable[a], newtable[a][b])
            end
        end
    end
    append!(newtable[1], n+1:n+length(imagespace))

    for i in 1:gg
        if mlist[i] > 1
            push!(newgenerators,sumlist[i+1]);
        else
            if generators[i] > 1
                push!(newgenerators,generators[i]);
            else
                if pointarray[i] == 0
                    push!(newgenerators,n+1);
                elseif pointarray[i] == 1
                    push!(newgenerators,1);
                end
            end
        end
    end

    return [newgenerators, newtable]
end

function findimproper(generators, table, ext)
    n = length(table)
    improper = []

    for i in 1:length(ext)
        for j in 1:length(ext[i])
            imagecheck = ext[i][j][1]
            tablecheck = ext[i][j][2]
            pointcheck = ext[i][j][3]
            cont = false

            for iz in 2:length(tablecheck)
                if n+1 in tablecheck[iz]
                    cont = true
                end
            end

            if generators[i] == 1 && pointcheck == 0
                cont = true
            end

            if cont continue; end;

                push!(improper, j)
                break
            end
        end
    return Tuple(improper);
end

function allmultiextensions(generators, table)
    ext = multigeneration(generators, table)
    cart = collect(Iterators.product([1:length(v) for v in ext]...))
    improper = findimproper(generators, table, ext)
    output = []

    for tup in cart
        if tup == improper
            continue
        end
        push!(output, multiextendtable(tup, generators, table, ext))
    end

    return output
end


function critmaxcong(table)
dic=Dict();
mvv=makefunction(table);
n=length(table);
prearray=[];
mm=0;
for i in 1:n
if length(table[i])==n 
push!(prearray,mm+1);
else
can=map(v->prearray[v],table[i]);
if haskey(dic,can);
axe=dic[can];
else axe=false; end;
if axe==false 
dic[can]=mm+1;
push!(prearray,mm+1);
else 
push!(prearray,axe);
end;
end;
mm=max(mm,prearray[i]);
end;

newdic=Dict();

finalarray=[];
mm=0;
for i in 1:n
can=map(v->prearray[mvv(v,i)],1:n)

if haskey(newdic,can) axe=newdic[can]
else axe=false; end;

if axe==false 
newdic[can]=mm+1;
push!(finalarray,mm+1);
else
push!(finalarray,axe);
end;
mm=max(mm,finalarray[i]);
end;
return finalarray;
end;

function nightmaretest(x)
critlist=critfind(x);
mvv=makefunction(x);
for i in 1:length(x)
for k in critlist
if mvv(mvv(i,i),k)==1 && !(mvv(i,k)==1) return false; end;
end;
end;
return true;
end;

function ssgextensions(generators,table)
output=[];
n=length(table);
gg=length(generators);
mvv=makefunction(table);
ext=multigeneration(generators,table);
improper=findimproper(generators,table,ext);
output=[];
for i in 1:length(ext)
push!(output,[]);
for j in 1:length(ext[i])
tuple=collect(deepcopy(improper));
if j==improper[i] continue; end;
tuple[i]=j;
proposal=multiextendtable(tuple,generators,table,ext);
if !nightmaretest(proposal[2]) continue; end;
push!(output[i],proposal);
end;
end;
return output;
end;

function makematrices(generators,table)
dic=Dict();
critlist=critfind(table);
cc=critlist[length(critlist)-1];
mvv=makefunction(table);
n=length(table);
prearray=zeros(Int64,cc);
prearray[cc]=1;
mm=1;
for i in cc+1:n
can=map(v->prearray[mvv(i,v)],generators);
if sum(can)==0 
push!(prearray,0); continue;
end;
if haskey(dic,can);
axe=dic[can];
else axe=false; end;
if axe==false 
dic[can]=mm+1;
push!(prearray,mm+1);
else 
push!(prearray,axe);
end;
mm=max(mm,prearray[i]);
end;
invarray=zeros(Int64,mm);
for i in 1:n
if prearray[i]>0
invarray[prearray[i]]=i;
end;
end;
A=[];
for g in generators
mat=spzeros(BigInt,mm,mm);
q=prearray[g];
if q>0
mat[1,q]+=1;
end;
for i in 2:mm
q=prearray[mvv(invarray[i],g)]
if q>0
mat[i,q]+=1;
end;
end;
push!(A,mat);
end;
return A;
end;



